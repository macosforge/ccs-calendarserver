<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">

<!--
    Copyright (c) 2006-2017 Apple Inc. All rights reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
  -->

<!--
	Docker specific

	caldavd.envsubst.plist is substituted at runtime by
	/home/ccs/contrib/docker/docker_entrypoint.sh,
	and env variables are inserted e.g. in $POSTGRES_HOST.

	This file is placed to $CCS_CONF_FILE by the ENTRYPOINT script,
	it includes /home/ccs/contrib/docker/caldavd.base.plist
	for sensible defaults,
	and imports /etc/caldavd/caldavd.ext.plist (mapped to a volume),
	for users to override settings.

	Do not edit this file directly!
	Please add /etc/caldavd/caldavd.ext.plist via volumes instead
 -->
<plist version="1.0">
<dict>

	<!-- Docker: Must be above 1024 for OpenShift -->
	<!-- HTTP port (0 to disable HTTP) -->
	<key>HTTPPort</key>
	<integer>8080</integer>

	<!-- True: database; False: files (deprecated) -->
	<key>UseDatabase</key>
	<true/>

	<!-- Possible values: empty, meaning 'spawn postgres yourself', or 'postgres'
	     or 'oracle', meaning 'connect to a postgres or Oracle database as
	     specified by the 'DSN' configuration key. -->
	<key>DBType</key>
	<string>postgres</string>

	<!-- Features supported by the database

	     'skip-locked': SKIP LOCKED available with SELECT (remove if using postgres
	     &lt; v9.5) -->
	<key>DBFeatures</key>
	<array>
		<string>skip-locked</string>
	</array>

	<!-- Set to True to prevent the server or utility tools from running if the
	     database needs a schema upgrade. -->
	<key>FailIfUpgradeNeeded</key>
	<true/>

	<!-- Set to True to check the current database schema against the schema file
	     matching the database schema version. -->
	<key>CheckExistingSchema</key>
	<true/>

	<!-- Data store -->

	<!-- The top level directory, contains (by default) ConfigRoot and DataRoot -->
	<key>ServerRoot</key>
	<string>/var/db/caldavd</string>

	<!-- Config directory, contains additional config files -->
	<key>ConfigRoot</key>
	<string>/etc/caldavd</string>

	<!-- These three keys are relative to ConfigRoot: -->

	<!-- Other plists to parse after this one; note that an Include can change the
	     ServerRoot and/or ConfigRoot, thereby affecting the locations of the
	     following Includes in the list. (Useful for service directory relocation) -->
	<key>Includes</key>
	<array>
		<string>/etc/caldavd/caldavd.ext.plist</string>
		<string>/etc/caldavd/caldavd.writable.plist</string>
	</array>

	<!-- Which config file calendarserver_config should  write to for changes;
	     empty string means the main config file -->
	<key>WritableConfigFile</key>
	<string>/etc/caldavd/caldavd.writable.plist</string>

	<!-- Used to connect to an external database if DBType is non-empty -->
	<key>DatabaseConnection</key>
	<dict>
		<!-- Database connection endpoint -->
		<key>endpoint</key>
		<string>$POSTGRES_HOST</string>
		<!-- <string>tcp:postgres:5432</string> -->

		<!-- Name of database or Oracle SID -->
		<key>database</key>
		<string>$POSTGRES_DB</string>
		<!-- <string>postgres</string> -->

		<!-- User name to connect as -->
		<key>user</key>
		<string>$POSTGRES_USER</string>
		<!-- <string>postgres</string> -->

		<!-- Password to use -->
		<key>password</key>
		<string>$POSTGRES_PASS</string>
		<!-- <string>password</string> -->

		<!-- Set to True to require SSL (pg8000 only). -->
		<key>ssl</key>
		<false/>
	</dict>

	<key>Memcached</key>
	<dict>
		<key>MaxClients</key>
		<integer>5</integer>

		<key>Pools</key>
		<dict>
			<key>Default</key>
			<dict>
				<!-- A unix socket used for communication with memcached. If MemcacheSocket
				     is empty string, an AF_INET socket is used. -->
				<key>MemcacheSocket</key>
				<string></string>

				<key>ClientEnabled</key>
				<true/>

				<!-- The server is handled outside our containers -->
				<key>ServerEnabled</key>
				<false/>

				<key>BindAddress</key>
				<string>$MEMCACHED_HOST</string>
				<!-- <string>memcached</string> -->

				<key>Port</key>
				<integer>$MEMCACHED_PORT</integer>
				<!-- <integer>11211</integer> -->

				<!-- Possible types: "OpenDirectoryBacker", "ImplicitUIDLock",
				     "RefreshUIDLock", "DIGESTCREDENTIALS", "resourceInfoDB", "pubsubnodes",
				     "FBCache", "ScheduleAddressMapper", "SQL.props", "SQL.calhome",
				     "SQL.adbkhome", -->
				<key>HandleCacheTypes</key>
				<array>
					<string>Default</string>
				</array>
			</dict>

			<!-- "Shared": { "ClientEnabled": True, "ServerEnabled": True, "BindAddress":
			     "127.0.0.1", "Port": 11211, "HandleCacheTypes": [ "ProxyDB",
			     "DelegatesDB", "PrincipalToken", ] }, -->
		</dict>

		<!-- Find in PATH -->
		<key>memcached</key>
		<string>memcached</string>

		<!-- Megabytes -->
		<key>MaxMemory</key>
		<integer>0</integer>

		<key>Options</key>
		<array>
		</array>

		<key>ProxyDBKeyNormalization</key>
		<true/>
	</dict>
</dict>
</plist>
